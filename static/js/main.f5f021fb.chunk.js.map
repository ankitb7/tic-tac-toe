{"version":3,"sources":["Cells.jsx","constants.js","GameBoard.jsx","App.js","index.js"],"names":["Cells","cells","onCellClick","map","cell","index","className","data-cell-index","onClick","defaultProps","endConditions","GameBoard","useState","Array","fill","setCells","firstPlayer","togglePlayer","winner","setWinner","getCurrentPlayer","checkIfGameCompleted","newCells","i","length","x","y","z","id","currentPlayer","every","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAGMA,EAAQ,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YAEnB,OAAQ,mCACHD,EAAME,KACH,SAACC,EAAMC,GAAP,OACI,qBAAKC,UAAU,OACVC,kBAAiBF,EAAOG,QAAS,kBAAMN,EAAYG,IADxD,SAEKD,GAFsBC,SAa3CL,EAAMS,aAAe,CACjBR,MAAO,GACPC,YAAa,cAGFF,QC1BFU,G,MAAgB,CACzB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KC0DIC,EA7DG,WAAO,IAAD,EACMC,mBAAS,IAAIC,MAAM,GAAGC,KAAK,OADjC,mBACbb,EADa,KACNc,EADM,OAEgBH,oBAAS,GAFzB,mBAEbI,EAFa,KAEAC,EAFA,OAGQL,mBAAS,MAHjB,mBAGbM,EAHa,KAGLC,EAHK,KAKdC,EAAmB,kBAAMJ,EAAc,IAAM,KAgB7CK,EAAuB,SAACC,GACzB,IAAI,IAAIC,EAAI,EAAGA,EAAIb,EAAcc,OAAQD,IAAK,CAAC,IAAD,cACxBb,EAAca,GADU,GACnCE,EADmC,KAChCC,EADgC,KAC7BC,EAD6B,KAE1C,GAAGL,EAASG,IAAMH,EAASG,KAAOH,EAASI,IAAMJ,EAASI,KAAOJ,EAASK,GACtE,OAAO,EAEf,OAAO,GAkBZ,OAAQ,qCACJ,qBAAKrB,UAAU,aAAf,yBAGA,qBAAKA,UAAU,aAAf,SACI,cAAC,EAAD,CAAOL,MAAOA,EAAOC,YAAagB,EAAS,aA3C/B,SAACU,GACjB,IAAMN,EAAQ,YAAOrB,GACrB,IAAIqB,EAASM,GAAK,CACd,IAAMC,EAAgBT,IACtBE,EAASM,GAAMC,EACfd,EAASO,GACND,EAAqBC,GACpBH,EAAUU,GAEVZ,GAAcD,SAoCtB,qBAAKV,UAAU,aAAf,SACI,wBAAQsB,GAAG,eAAepB,QAvBhB,WACd,IAAMc,EAAW,IAAIT,MAAM,GAAGC,KAAK,MACnCC,EAASO,GACTL,GAAa,GACbE,EAAU,OAmBN,0BAEJ,qBAAKb,UAAU,cAAf,SAjBGY,EACQA,EAAS,uBACjBjB,EAAM6B,OAAM,SAAA1B,GAAI,OAAa,OAATA,KACZ,cACJgB,IAAqB,oB,MCnCrBW,MARf,WACE,OACE,qBAAKzB,UAAU,YAAf,SACE,cAAC,EAAD,OCFN0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f5f021fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cells = ({cells, onCellClick}) => {\r\n\r\n    return (<>\r\n        {cells.map(\r\n            (cell, index) =>\r\n                <div className='cell' key={index}\r\n                     data-cell-index={index} onClick={() => onCellClick(index)}>\r\n                    {cell}\r\n                </div>\r\n        )}\r\n    </>);\r\n};\r\n\r\nCells.propTypes = {\r\n    cells: PropTypes.array,\r\n    onCellClick: PropTypes.func,\r\n};\r\n\r\nCells.defaultProps = {\r\n    cells: [],\r\n    onCellClick: ()=>{},\r\n};\r\n\r\nexport default Cells;","export const endConditions = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n];","import React, {useState} from 'react';\r\nimport Cells from './Cells';\r\nimport './GameBoard.css';\r\nimport {endConditions} from './constants';\r\n\r\nconst GameBoard = () => {\r\n    const [cells, setCells] = useState(new Array(9).fill(null));\r\n    const [firstPlayer, togglePlayer] = useState(true);\r\n    const [winner, setWinner] = useState(null);\r\n\r\n    const getCurrentPlayer = () => firstPlayer ? 'X' : 'O';\r\n\r\n    const onCellClick = (id) => {\r\n        const newCells = [...cells];\r\n        if(!newCells[id]) {\r\n            const currentPlayer = getCurrentPlayer();\r\n            newCells[id] = currentPlayer;\r\n            setCells(newCells);\r\n            if(checkIfGameCompleted(newCells)) {\r\n                setWinner(currentPlayer);\r\n            } else {\r\n                togglePlayer(!firstPlayer);\r\n            }\r\n        }\r\n    };\r\n\r\n    const checkIfGameCompleted = (newCells) => {\r\n         for(let i = 0; i < endConditions.length; i++) {\r\n             const [x, y, z] = endConditions[i];\r\n             if(newCells[x] && newCells[x] === newCells[y] && newCells[y] === newCells[z])\r\n                 return true;\r\n         }\r\n         return false;\r\n    };\r\n\r\n    const clearGrid = () => {\r\n        const newCells = new Array(9).fill(null);\r\n        setCells(newCells);\r\n        togglePlayer(true);\r\n        setWinner(null);\r\n    };\r\n\r\n    const getGameStatus = () => {\r\n        if(winner)\r\n            return winner + ' has won the game!!!';\r\n        if(cells.every(cell => cell !== null))\r\n            return 'Its a draw!';\r\n        return getCurrentPlayer() + ' plays next';\r\n    };\r\n\r\n    return (<>\r\n        <div className='game-title'>\r\n            Tic Tac Toe\r\n        </div>\r\n        <div className='game-board'>\r\n            <Cells cells={cells} onCellClick={winner ? () => {} : onCellClick}/>\r\n        </div>\r\n        <div className='game-panel'>\r\n            <button id=\"reset-button\" onClick={clearGrid}>Reset Game</button>\r\n        </div>\r\n        <div className='game-status'>\r\n            {getGameStatus()}\r\n        </div>\r\n    </>)\r\n};\r\n\r\nexport default GameBoard;","import React from 'react';\nimport GameBoard from './GameBoard';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='container'>\n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}